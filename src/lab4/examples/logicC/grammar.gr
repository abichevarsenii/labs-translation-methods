grammar LogicC;

@node (
return Boolean;
default false;
)

a[params: Map<String, Boolean>]       :
    b[params] aPoint[params];

aPoint[params: Map<String, Boolean>] :
    OR b[params] aPoint[params]
    | EPS;

b[params: Map<String, Boolean>]      :
    c[params] bPoint[params];

bPoint[params: Map<String, Boolean>]  :
    XOR c[params] bPoint[params]
    | EPS;

c[params: Map<String, Boolean>]    :
    d[params] cPoint[params];

cPoint[params: Map<String, Boolean>]  :
    AND d[params] cPoint[params]
    | EPS;

d[params: Map<String, Boolean>]       :
    NOT e[params]
    | e[params];

e[params: Map<String, Boolean>]       :
    LB a[params] RB
    | VAR {res.value = params.get(VAR.text)!!; VAR.value = res.value;};

AND : '\\&';
OR : '\\|';
XOR : '\\^';
NOT : '\\!';
LB      : '\\(' ;
RB      : '\\)' ;
VAR    : '[a-zA-Z]+';