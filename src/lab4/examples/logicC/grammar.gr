grammar LogicC;

@member $
fun op(a: Boolean?, b: Boolean?, op: String): Boolean? {
    return if (a != null && b != null) when (op) {
        "^" -> a xor b
        "&" -> a && b
        "|" -> a || b
        "!" -> !a
        else -> null
    } else return null
}
fun check(s : String, b : Boolean?) : String{
    if (b == null) return s;
    else return b.toString();
}
$

@node (
name value;
return Boolean?;
default null;
)

@node (
name str;
return String;
default "";
)

a[params: Map<String, Boolean>][count : Boolean?][str : String]       :
    b[params,count,str] aPoint[params,b.value,str] {res.value = aPoint.value; res.str = check(b.str + aPoint.str, aPoint.value);};

aPoint[params: Map<String, Boolean>][count : Boolean?][str : String]   :
    OR b[params,count,str] aPoint[params,op(count, b.value,"|"),str] {res.value = aPoint.value; res.str = check(OR.text!! + b.str + aPoint.str,aPoint.value);}
    | EPS {res.value = count; res.str = str;};

b[params: Map<String, Boolean>][count : Boolean?][str : String]        :
    c[params,count,str] bPoint[params,c.value,c.str] {res.value = bPoint.value; res.str = check(c.str + bPoint.str, bPoint.value);};

bPoint[params: Map<String, Boolean>][count : Boolean?][str : String]   :
    XOR c[params,count,str] bPoint[params, op(count, c.value,"^"),str] {res.value = bPoint.value; res.str = check(XOR.text!! + c.str + bPoint.str,bPoint.value);}
    | EPS {res.value = count; res.str = str;};

c[params: Map<String, Boolean>][count : Boolean?][str : String]        :
    d[params,count,str] cPoint[params,d.value,d.str] {res.value = cPoint.value ; res.str = check(d.str + cPoint.str, cPoint.value);};

cPoint[params: Map<String, Boolean>][count : Boolean?][str : String]   :
    AND d[params,count,str] cPoint[params, op(count, d.value, "&"),str] {res.value = cPoint.value; res.str = check(AND.text!! + d.str + cPoint.str, cPoint.value);}
    | EPS {res.value = count, res.str = str};

d[params: Map<String, Boolean>][count : Boolean?][str : String]       :
    NOT e[params,count,str] {res.value = op(e.value,false,"!") ; res.str = check(NOT.text!! + e.str, e.value);}
    | e[params,count,str] {res.value = e.value; res.str = e.str};

e[params: Map<String, Boolean>][count : Boolean?][str : String]        :
    LB a[params,count,str] RB {res.value = a.value; res.str = check(LB.text!! + a.str + RB.text!!, a.value)}
    | VAR {res.value = params.get(VAR.text); res.str =  if (res.value != null) res.value.toString() else VAR.text!!;};

AND : '\\&';
OR : '\\|';
XOR : '\\^';
NOT : '\\!';
LB      : '\\(' ;
RB      : '\\)' ;
VAR    : '[a-zA-Z]+';